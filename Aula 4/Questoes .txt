1-Perifericos 
	RTC
		É um clock responsavel por registrar a hora, os minutos, os segundos, o seculo, ou seja, responsavel pelo calculo da data no uC
	TC
		Responsvel por  PWM , medição de frequencias, contador de eventos , gerar pulsos , medir intervalos e atrasar o tempo 
1-Endereços
	PIOA
		0X400E0E00
	PIOB
		0X400E1000
	ACC
		0X40040000
	UART1
		0X40024000
	UART2
		0X40028000

		

		
2-IO pinos
	PA01
		C8
	PB22
	 ??????????????????????
	PC12
		K3
2- PIO Perifericos 
	PC20
		A2 e PWMH2
	PB3
		URXD1 e NPCS2
		
3- Debouncing 
	Deboucing é a caracteristica de um sistema de filtrar os ruidos mecanicos de um pushbutton 
	Ex algoritmo deboucing
		Checar a cada intervalo de tempo (em milisegundos) o estado do botao. Se este estado permanecer diferente do estado inicail, o botao foi pressionado, se nao foi apenas um ruido.
		Codigo :
			
			#define CHECK_MSEC	5	// Read hardware every 5 msec
			#define PRESS_MSEC	10	// Stable time before registering pressed
			#define RELEASE_MSEC	100	// Stable time before registering released
			// This function reads the key state from the hardware.
			extern bool_t RawKeyPressed();

			// This holds the debounced state of the key.
			bool_t DebouncedKeyPress = false;

			// Service routine called every CHECK_MSEC to
			// debounce both edges
			void DebounceSwitch1(bool_t *Key_changed, bool_t *Key_pressed)
			{
				static uint8_t Count = RELEASE_MSEC / CHECK_MSEC;
				bool_t RawState;
				*Key_changed = false;
				*Key_pressed = DebouncedKeyPress;
				RawState = RawKeyPressed();
				if (RawState == DebouncedKeyPress) {
					// Set the timer which will allow a change from the current state.
					if (DebouncedKeyPress) Count = RELEASE_MSEC / CHECK_MSEC;
					else                 Count = PRESS_MSEC / CHECK_MSEC;
				} else {
					// Key has changed - wait for new state to become stable.
					if (--Count == 0) {
						// Timer expired - accept the change.
						DebouncedKeyPress = RawState;
						*Key_changed=true;
						*Key_pressed=DebouncedKeyPress;
						// And reset the timer.
						if (DebouncedKeyPress) Count = RELEASE_MSEC / CHECK_MSEC;
						else                 Count = PRESS_MSEC / CHECK_MSEC;
					}
				}
			}
4- Race Conditions 
	Race conditions e uma condição onde uma aplicação cuja 2 ou mais threads , ou sinais eletricos no caso do uC, tentam acessar e/ou alterar o mesmo espaço de memoria, ou registrador 
	Ao configurar os registradores da maneira apresentada, a race conditions e evitada pois cada registrador so possui uma funcao especifica.

5 - Configurando um pino em modo de output
		Quando a linha I/O aciona a função periférica (PIO_PSR está em zero) o drive da linha de I / O é controlada pelo periférico.
		Quando o controlador PIO manipula a linha I/O, o pino pode ser configurado, feito a partir da escrita do PIO_OER e PIO_ODR, O PIO_OSR detecta essa escrita, quando um bit é setado para zero 
		a linha referente é configurada para apenas aceitar valores, e quando é setado a 1, a linha obedece ao comando do controlador PIO.
		
		